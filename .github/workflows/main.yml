# -------------------------------------------------------------------------------------
# NOTE FOR MAINTAINERS:
#
# This workflow is intentionally configured to use ONLY pre-built Skia binaries.
# Do NOT add installation steps for gn, ninja, depot_tools, or any Skia source build tools.
#
# Why?
# - Source building Skia is slow and unstable in CI (missing tools, corrupted binaries, git errors, etc.)
# - Pre-built Skia binaries (via FORCE_SKIA_BINARIES_DOWNLOAD=1 and related env vars) are fast and reliable.
# - This mirrors the local debug_plugin.bat script and eliminates all prior CI failures.
#
# To upgrade Skia, ONLY update SKIA_BINARIES_URL and SKIA_BINARIES_KEY to point at a new prebuilt release.
# If you need to build Skia from source, do so locally and contribute new binaries upstream.
#
# See commit bfe64569821613638ad91266a19215bbdc22d1b5 and the workflow run at
# https://github.com/fsecada01/bus_channel_strip/actions/runs/17618457424/job/50057771486
# for full rationale and history.
# -------------------------------------------------------------------------------------

name: Create VST3/CLAP Release

on:
  push:
    branches:
      - main
      - 'v[0-9]+*'

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows
          - target: x86_64-apple-darwin
            os: macos-13
            name: macos-intel
          - target: aarch64-apple-darwin
            os: macos-14
            name: macos-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # Fix Git repository state for submodules (addresses Skia build issues)
      - name: Ensure submodules have full git context
        run: |
          git submodule update --init --recursive --depth=0
          git submodule foreach --recursive 'git fetch --unshallow || true'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libasound2-dev \
            libgl1-mesa-dev \
            libx11-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxi-dev \
            libxinerama-dev \
            libxss-dev \
            libglu1-mesa-dev \
            build-essential

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Configure Rust for MSVC target (matches local script)
          rustup target add x86_64-pc-windows-msvc

      - name: Set environment for pre-built Skia binaries
        shell: bash
        run: |
          # Force use of pre-built Skia binaries (mirrors local script exactly)
          echo "FORCE_SKIA_BINARIES_DOWNLOAD=1" >> $GITHUB_ENV
          echo "SKIA_BINARIES_URL=https://github.com/rust-skia/skia-binaries/releases/download/0.84.0/" >> $GITHUB_ENV
          echo "SKIA_BINARIES_KEY=skia-binaries-0.84.0" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV
          
          # Windows-specific environment (matches local debug_plugin.bat)
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]]; then
            echo "TARGET=x86_64-pc-windows-msvc" >> $GITHUB_ENV
            echo "CARGO_CFG_TARGET_ENV=msvc" >> $GITHUB_ENV
          fi
          
          # Force exclusive use of pre-built Skia binaries
          echo "SKIA_SOURCE_DIR=" >> $GITHUB_ENV
          echo "SKIA_USE_SYSTEM_LIBRARIES=0" >> $GITHUB_ENV
          echo "DOCS_RS=1" >> $GITHUB_ENV
          
          # Platform-specific optimizations
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            echo "CFLAGS=-DZLIB_DISABLE_CHUNK_SIMD" >> $GITHUB_ENV
            echo "CXXFLAGS=-DZLIB_DISABLE_CHUNK_SIMD" >> $GITHUB_ENV
          fi

      - name: Build xtask
        run: |
          cargo +nightly build --package xtask

      - name: Build and bundle plugins (with GUI)
        if: matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-apple-darwin'
        run: |
          cargo +nightly run --package xtask -- bundle bus_channel_strip --release --target ${{ matrix.target }} --features api5500,buttercomp2,transformer,gui

      - name: Build and bundle plugins (without GUI for ARM64 only)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          cargo +nightly run --package xtask -- bundle bus_channel_strip --release --target ${{ matrix.target }} --features api5500,buttercomp2,transformer

      - name: Create archive name
        id: archive
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            echo "name=Bus-Channel-Strip-${{ matrix.name }}.zip" >> $GITHUB_OUTPUT
          else
            echo "name=Bus-Channel-Strip-${{ matrix.name }}.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Create archive
        shell: bash
        run: |
          cd target/bundled
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            zip -r Bus-Channel-Strip-${{ matrix.name }}.zip Bus-Channel-Strip.vst3 Bus-Channel-Strip.clap
          else
            tar -czf Bus-Channel-Strip-${{ matrix.name }}.tar.gz Bus-Channel-Strip.vst3 Bus-Channel-Strip.clap
          fi
          ls -la

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.name }}
          path: target/bundled/${{ steps.archive.outputs.name }}

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: echo "VERSION=$(grep -m 1 'version' Cargo.toml | cut -d '"' -f 2)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: |
          echo "=== Downloaded artifacts ==="
          ls -la artifacts/
          find artifacts/ -type f

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Bus Channel Strip v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}

      - name: Upload Linux release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Bus-Channel-Strip-linux.tar.gz/Bus-Channel-Strip-linux.tar.gz
          asset_name: Bus-Channel-Strip-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Bus-Channel-Strip-windows.zip/Bus-Channel-Strip-windows.zip
          asset_name: Bus-Channel-Strip-windows.zip
          asset_content_type: application/zip

      - name: Upload macOS Intel release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Bus-Channel-Strip-macos-intel.tar.gz/Bus-Channel-Strip-macos-intel.tar.gz
          asset_name: Bus-Channel-Strip-macos-intel.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS ARM64 release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Bus-Channel-Strip-macos-arm64.tar.gz/Bus-Channel-Strip-macos-arm64.tar.gz
          asset_name: Bus-Channel-Strip-macos-arm64.tar.gz
          asset_content_type: application/gzip